--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): Dominators, Betrayal
        Always b
Player 1 (P1): Jacob?, No_Idea_Yet
        In_The_Process_Of
Player 2 (P2): Nathaniel?, Final Hour
        To be determined
Player 3 (P3): team 3, team 3 strategy
        Don't have one
Player 4 (P4): MB_AC_ME, Denial
        If the partner in crime colludes more often than betraying, we will coll
        ude
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4
vs. P0 :      0   -245      0      0      0
vs. P1 :   -250      0   -195   -224   -233
vs. P2 :      0     38      0      0      0
vs. P3 :      0     44      0      0      0
vs. P4 :      0     46      0      0      0
TOTAL  :   -250   -117   -195   -224   -233
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
Jacob?    (P1):        -24 points with No_Idea_Yet                             
Nathaniel?(P2):        -39 points with Final Hour                              
team 3    (P3):        -45 points with team 3 strategy                         
MB_AC_ME  (P4):        -47 points with Denial                                  
Dominators(P0):        -50 points with Betrayal                                
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team0--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Dominators' # Only 10 chars displayed.
strategy_name = 'Betrayal'
strategy_description = 'Always b'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if len(their_history)>0 and their_history[len(their_history)-1] == 'b':
        return 'b'
    if my_score < their_score:
        return 'b'
    else:
        return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='b',
              their_history='b', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    if test_move(my_history='bbc',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=200,
              result='b'):
          print 'Test passed'            --------------------------------------------------------------------------------
team1--------------------------------------------------------------------------------
import random
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Jacob?' # Only 10 chars displayed.
strategy_name = 'No_Idea_Yet'
strategy_description = 'In_The_Process_Of'

def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    Time = 0
    if len(my_history)==0:
        Time = 8
    else:
        Time = random.randint(1,24)
    if len(my_history) == 0:
        return 'b'
    else:
        if Time > 12:
            return 'b'
        elif their_history[len(their_history)-1] == 'b':
            return 'b'
        elif my_score < their_score + 150:
            return 'b'
        else:
            return 'c'
        
            

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='bbc',
              their_history='bbc', 
              my_score=155,
              their_score=0,
              result='c'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Nathaniel?' # Only 10 chars displayed.
strategy_name = 'Final Hour'
strategy_description = 'To be determined'
  
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team3--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'team 3' # Only 10 chars displayed.
strategy_name = 'team 3 strategy'
strategy_description = "Don't have one"
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'MB_AC_ME' # Only 10 chars displayed.
strategy_name = 'Denial'
strategy_description = 'If the partner in crime colludes more often than betraying, we will collude'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    b_counter = 0
    c_counter = 0
    if my_score % 20 == 0:
        return 'c'
    if len(their_history > 2):
        for i in range(len(their_history)):
            if their_history[i] == 'b':
                b_counter += 1
            if their_history[i] == 'c':
                c_counter += 1 
        if b_counter > c_counter:
            return 'b'
        if b_counter == c_counter:
            return random.choice(['b', 'c'])
    if my_score > their_score:
        return 'c'
    
    else:
        return 'b'
    

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Dominators
--------------------------------------------------------------------------------
-250 pt/round: Dominators(P0) "Betrayal"
-245 pt/round: Jacob?(P1) "No_Idea_Yet"
cBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
BcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
0 pt/round: Dominators(P0) "Betrayal"
0 pt/round: Nathaniel?(P2) "Final Hour"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: Dominators(P0) "Betrayal"
0 pt/round: team 3(P3) "team 3 strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCC
CCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: Dominators(P0) "Betrayal"
0 pt/round: MB_AC_ME(P4) "Denial"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Jacob?
--------------------------------------------------------------------------------
-245 pt/round: Jacob?(P1) "No_Idea_Yet"
-250 pt/round: Dominators(P0) "Betrayal"
BcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
38 pt/round: Jacob?(P1) "No_Idea_Yet"
-195 pt/round: Nathaniel?(P2) "Final Hour"
BCCBCCCCCBCCCBCBBBBBCBCCCBCCCCBCCBCBCCCCCCCCBCCBCBBCBCCCCCBBBCCBCCBCCCCCCBBBCBCC
cCCcCCCCCcCCCcCcccccCcCCCcCCCCcCCcCcCCCCCCCCcCCcCccCcCCCCCcccCCcCCcCCCCCCcccCcCC

BCCCCCCBCBBCBCBBBCCBBBBCCBCCCBBBBCCBCCCBCBBCCCCCCBBCBCBC
cCCCCCCcCccCcCcccCCccccCCcCCCccccCCcCCCcCccCCCCCCccCcCcC

--------------------------------------------------------------------------------
44 pt/round: Jacob?(P1) "No_Idea_Yet"
-224 pt/round: team 3(P3) "team 3 strategy"
BCBBCCCCBCCBBCCBCCBCBCBCCCBCBCCBBBBBBCCCBBBBBCBBCCBCCCBCCCCBBCCCCCCCBBCCCCBCCCCB
cCccCCCCcCCccCCcCCcCcCcCCCcCcCCccccccCCCcccccCccCCcCCCcCCCCccCCCCCCCccCCCCcCCCCc

BBCBCBCCCCBBCCBCBCCCBCBBBBBBCCCBBB
ccCcCcCCCCccCCcCcCCCcCccccccCCCccc

--------------------------------------------------------------------------------
46 pt/round: Jacob?(P1) "No_Idea_Yet"
-233 pt/round: MB_AC_ME(P4) "Denial"
BCCCCCBBCBBBCBBBCCBBBCBCBCCCBCCCCCBBBBBCBBBCBBBCBBCBCBBCCCBBCBCCCCCBCCCCCBCBBBBB
cCCCCCccCcccCcccCCcccCcCcCCCcCCCCCcccccCcccCcccCccCcCccCCCccCcCCCCCcCCCCCcCccccc

BBCBBCBBCCCCCCCCCCBCBBBCCBBCBBBCCCCCBBCCCCCCCCCBCBBCBBBBCBCCBCBCBCBBCCCCBCC
ccCccCccCCCCCCCCCCcCcccCCccCcccCCCCCccCCCCCCCCCcCccCccccCcCCcCcCcCccCCCCcCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Nathaniel?
--------------------------------------------------------------------------------
0 pt/round: Nathaniel?(P2) "Final Hour"
0 pt/round: Dominators(P0) "Betrayal"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-195 pt/round: Nathaniel?(P2) "Final Hour"
38 pt/round: Jacob?(P1) "No_Idea_Yet"
cCCcCCCCCcCCCcCcccccCcCCCcCCCCcCCcCcCCCCCCCCcCCcCccCcCCCCCcccCCcCCcCCCCCCcccCcCC
BCCBCCCCCBCCCBCBBBBBCBCCCBCCCCBCCBCBCCCCCCCCBCCBCBBCBCCCCCBBBCCBCCBCCCCCCBBBCBCC

cCCCCCCcCccCcCcccCCccccCCcCCCccccCCcCCCcCccCCCCCCccCcCcC
BCCCCCCBCBBCBCBBBCCBBBBCCBCCCBBBBCCBCCCBCBBCCCCCCBBCBCBC

--------------------------------------------------------------------------------
0 pt/round: Nathaniel?(P2) "Final Hour"
0 pt/round: team 3(P3) "team 3 strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: Nathaniel?(P2) "Final Hour"
0 pt/round: MB_AC_ME(P4) "Denial"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team team 3
--------------------------------------------------------------------------------
0 pt/round: team 3(P3) "team 3 strategy"
0 pt/round: Dominators(P0) "Betrayal"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCC
CCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-224 pt/round: team 3(P3) "team 3 strategy"
44 pt/round: Jacob?(P1) "No_Idea_Yet"
cCccCCCCcCCccCCcCCcCcCcCCCcCcCCccccccCCCcccccCccCCcCCCcCCCCccCCCCCCCccCCCCcCCCCc
BCBBCCCCBCCBBCCBCCBCBCBCCCBCBCCBBBBBBCCCBBBBBCBBCCBCCCBCCCCBBCCCCCCCBBCCCCBCCCCB

ccCcCcCCCCccCCcCcCCCcCccccccCCCccc
BBCBCBCCCCBBCCBCBCCCBCBBBBBBCCCBBB

--------------------------------------------------------------------------------
0 pt/round: team 3(P3) "team 3 strategy"
0 pt/round: Nathaniel?(P2) "Final Hour"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: team 3(P3) "team 3 strategy"
0 pt/round: MB_AC_ME(P4) "Denial"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team MB_AC_ME
--------------------------------------------------------------------------------
0 pt/round: MB_AC_ME(P4) "Denial"
0 pt/round: Dominators(P0) "Betrayal"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-233 pt/round: MB_AC_ME(P4) "Denial"
46 pt/round: Jacob?(P1) "No_Idea_Yet"
cCCCCCccCcccCcccCCcccCcCcCCCcCCCCCcccccCcccCcccCccCcCccCCCccCcCCCCCcCCCCCcCccccc
BCCCCCBBCBBBCBBBCCBBBCBCBCCCBCCCCCBBBBBCBBBCBBBCBBCBCBBCCCBBCBCCCCCBCCCCCBCBBBBB

ccCccCccCCCCCCCCCCcCcccCCccCcccCCCCCccCCCCCCCCCcCccCccccCcCCcCcCcCccCCCCcCC
BBCBBCBBCCCCCCCCCCBCBBBCCBBCBBBCCCCCBBCCCCCCCCCBCBBCBBBBCBCCBCBCBCBBCCCCBCC

--------------------------------------------------------------------------------
0 pt/round: MB_AC_ME(P4) "Denial"
0 pt/round: Nathaniel?(P2) "Final Hour"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: MB_AC_ME(P4) "Denial"
0 pt/round: team 3(P3) "team 3 strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
